Setting up and using a Node.js app involves several steps, from initializing a new project, installing dependencies, defining routes and controllers, to finally running the server. Here's a step-by-step guide:

### Step 1: Install Node.js
If you haven't already, you need to install Node.js. You can download and install it from the official website: [Node.js Downloads](https://nodejs.org/en/download/)

### Step 2: Initialize a New Node.js Project
Create a new directory for your project and navigate into it:

```bash
mkdir my_node_app
cd my_node_app
```

Then, initialize a new Node.js project using npm:

```bash
npm init -y
```

This will create a `package.json` file in your project directory.

### Step 3: Install Dependencies
Install any dependencies your app requires. For a basic web application, you'll typically need Express.js as the web framework. Install it via npm:

```bash
npm install express
```

You might also install other dependencies like database drivers, template engines, etc., depending on your project's requirements.

### Step 4: Create Your App Files
Create your app's JavaScript files. For a simple Express.js app, you'd typically have an `app.js` file to define your Express application.

### Step 5: Define Routes and Controllers
In your `app.js` file, define routes and controllers. Routes define the URL endpoints, and controllers handle the logic for each route.

### Step 6: Set Up Views (Optional)
If your app requires HTML templates, you might want to set up a template engine like EJS or Handlebars. Install the template engine via npm:

```bash
npm install ejs
```

Then, set up your views directory and create your template files.

### Step 7: Configure Your App
Set up any necessary configurations for your app, such as database connections, environment variables, etc.

### Step 8: Start the Server
In your `app.js` file, start the Express server by listening on a port:

```javascript
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(port, () => {
  console.log(`App listening at http://localhost:${port}`);
});
```

### Step 9: Run Your App
Run your Node.js app using Node.js:

```bash
node app.js
```

### Step 10: Test Your App
Visit `http://localhost:3000` in your web browser to test your Node.js app.

### Step 11: Build Your App
Continue building your app by adding more routes, controllers, views, and functionality as needed.

That's a basic overview of setting up and using a Node.js app. Each step can be customized and expanded based on your specific requirements.