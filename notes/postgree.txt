Sure, I'll guide you through setting up a Node.js backend with PostgreSQL for a task management application.

1. **Install PostgreSQL**:

   First, you need to install PostgreSQL on your system. You can download the PostgreSQL installer from the official PostgreSQL website (https://www.postgresql.org/download/).

2. **Start PostgreSQL**:

   After installation, start the PostgreSQL server. The process to start PostgreSQL varies depending on your operating system. You can refer to the PostgreSQL documentation for detailed instructions.

3. **Node.js Backend with PostgreSQL**:

   Now, let's create a Node.js backend and connect it to PostgreSQL.

**Step 1: Install Dependencies**:

Navigate to your project directory and initialize a new Node.js project:
```bash
mkdir task-manager-postgres
cd task-manager-postgres
npm init -y
```

Install necessary dependencies:
```bash
npm install express pg sequelize body-parser
```

**Step 2: Set Up PostgreSQL Connection**:

Create a `db.js` file in your project directory:
```javascript
// db.js
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize('task_manager', 'postgres', 'your_password', {
  host: 'localhost',
  dialect: 'postgres',
});

module.exports = sequelize;
```

**Step 3: Define Task Model**:

Create a `models/Task.js` file to define the Task model using Sequelize:
```javascript
// models/Task.js
const { DataTypes } = require('sequelize');
const sequelize = require('../db');

const Task = sequelize.define('Task', {
  title: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  description: {
    type: DataTypes.TEXT,
  },
  completed: {
    type: DataTypes.BOOLEAN,
    defaultValue: false,
  },
}, { timestamps: true });

module.exports = Task;
```

**Step 4: Set Up Express Server**:

Create a `server.js` file to set up the Express server:
```javascript
// server.js
const express = require('express');
const bodyParser = require('body-parser');
const Task = require('./models/Task');
const sequelize = require('./db');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(bodyParser.json());

// Sync Sequelize models with the database
sequelize.sync({ force: false })
  .then(() => console.log('Database & tables synced'))
  .catch(err => console.error('Error syncing database:', err));

app.get('/api/tasks', async (req, res) => {
  try {
    const tasks = await Task.findAll();
    res.json(tasks);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server Error' });
  }
});

app.post('/api/tasks', async (req, res) => {
  try {
    const { title, description } = req.body;
    const task = await Task.create({ title, description });
    res.status(201).json(task);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Server Error' });
  }
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```

**Step 5: Run the Server**:

Run the Node.js server:
```bash
node server.js
```

Now, you have a basic Node.js backend connected to PostgreSQL. You can start building the frontend (using React or any other framework) to interact with this backend for task management functionalities.